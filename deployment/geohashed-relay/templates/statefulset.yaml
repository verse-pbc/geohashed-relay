apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geohashed-relay
  namespace: geohashed-relay
  labels:
    app.kubernetes.io/name: geohashed-relay
    app.kubernetes.io/part-of: geohashed-relay
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ .Values.statefulset.serviceName }}
  selector:
    matchLabels:
      app.kubernetes.io/name: geohashed-relay
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geohashed-relay
        app.kubernetes.io/part-of: geohashed-relay
        app.kubernetes.io/managed-by: Helm
    spec:
      securityContext:
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      containers:
        - name: geohashed-relay
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "Always" }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            # Relay private key from sealed secret
            - name: RELAY_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: geohashed-relay-secret
                  key: relay-private-key
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            successThreshold: {{ .Values.healthCheck.successThreshold }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "{{ .Values.persistence.accessMode }}" ]
        {{- if .Values.persistence.storageClass }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
  {{- else }}
  volumes:
    - name: data
      emptyDir: {}
  {{- end }}